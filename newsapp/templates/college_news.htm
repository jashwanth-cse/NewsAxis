{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>NewsAxis - College News</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet"/>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #fff7f0;
            color: #333;
        }
        .header {
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            color: white;
            padding: 20px 40px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        .header-logo {
            width: 60px;
            height: 60px;
            margin-right: 20px;
        }
        .navbar-brand {
            font-size: 2.2rem;
            font-weight: 700;
            color: white;
            text-decoration: none;
        }
        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ff8e53);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
        }
        #backToTop {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: none;
            border-radius: 50%;
            padding: 10px 15px;
            font-size: 18px;
            background: linear-gradient(45deg, #ff6b6b, #ff8e53);
            color: white;
            border: none;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            z-index: 1000;
        }
        .btn-primary {
            background: linear-gradient(45deg, #ff7e5f, #feb47b);
        }
        .btn-bookmark {
            background: linear-gradient(45deg, #ffca28, #ffb300);
            color: white;
            padding: 6px 12px;
        }
        .btn-remove {
            background: linear-gradient(45deg, #ff3b3b, #d32f2f);
            color: white;
            padding: 6px 12px;
        }
        .news-article {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }
        .news-article img {
            max-height: 300px;
            width: 100%;
            object-fit: cover;
        }
        .article-body {
            padding: 20px;
        }
        .article-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: #333;
        }
        .article-text {
            font-size: 1rem;
            color: #666;
        }
        .article-meta {
            font-size: 0.9rem;
            color: #999;
        }
        .section-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #ff7e5f;
            text-align: center;
            margin-bottom: 20px;
        }
        .footer {
            background: linear-gradient(135deg, #ff7e5f, #feb47b);
            padding: 20px;
            color: white;
            text-align: center;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div>
            <img src="{% static 'images/logo.png' %}" alt="Logo" class="header-logo"/>
            <a class="navbar-brand" href="{% url 'home' %}">NewsAxis</a>
        </div>
        <div>
            <button class="btn btn-primary" id="login-btn" data-bs-toggle="modal" data-bs-target="#authModal">Login/Signup</button>
        </div>
    </div>
    <!-- Back to Top Button -->
    <button id="backToTop" class="btn btn-secondary" onclick="scrollToTop()">↑</button>
    <script>
        // Show/hide button on scroll
        window.onscroll = function() {
          const button = document.getElementById("backToTop");
          if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
            button.style.display = "block";
          } else {
            button.style.display = "none";
          }
        };
      
        // Scroll to top smoothly
        function scrollToTop() {
          window.scrollTo({ top: 0, behavior: "smooth" });
        }
      </script>
    <!-- College News Section -->
    <div class="container mt-5">
        <h2 class="section-title">🎓 College News</h2>
        <div class="text-center mb-4">
            <a href="{% url 'home' %}" class="btn btn-primary">Back to Home</a>
        </div>
        <div id="college-news">
            {% for post in news %}
            <div class="news-article">
                {% if post.image %}
                <img src="{{ post.image }}" alt="News Image" onerror="this.src='{% static 'images/logo.png' %}'"/>
                {% endif %}
                <div class="article-body">
                    <h3 class="article-title">{{ post.title|default:"College Update" }}</h3>
                    <p class="article-text">{{ post.text }}</p>
                    <p class="article-meta">Posted on {{ post.created_at }}</p>
                    <div class="d-flex gap-2">
                        <a href="{{ post.url }}" target="_blank" class="btn btn-outline-primary btn-sm">Read on X</a>
                        <button class="btn btn-bookmark btn-sm bookmark-btn" style="display: none;"
                                data-title="{{ post.title|default:'College Update' }}"
                                data-description="{{ post.text|slice:':100' }}"
                                data-image="{{ post.image|default_if_none:'#' }}"
                                data-url="{{ post.url }}"
                                data-post-id="{{ post.id }}">Bookmark</button>
                        <button class="btn btn-remove btn-sm remove-btn" style="display: none;"
                                data-post-id="{{ post.id }}">Remove</button>
                    </div>
                </div>
            </div>
            {% empty %}
            <div class="text-center">
                <p>No college news available at the moment. Please check back later.</p>
            </div>
            {% endfor %}
        </div>
    </div>

    <!-- Footer -->
    <div class="footer mt-5">
        <p>© 2025 NewsAxis. All rights reserved.</p>
    </div>

    <!-- Auth Modal -->
    <div class="modal fade" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-4">
                <div class="modal-header">
                    <h5 class="modal-title" id="authModalLabel">Login</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="auth-form">
                        <div class="mb-3">
                            <label for="auth-email" class="form-label">Email address</label>
                            <input type="email" class="form-control" id="auth-email" required />
                        </div>
                        <div class="mb-3">
                            <label for="auth-password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="auth-password" required />
                            <div id="auth-error-msg" class="text-danger mt-2 small"></div>
                        </div>
                        <button type="submit" class="btn btn-primary w-100" id="auth-submit-btn">Login</button>
                    </form>
                    <p class="text-center mt-3" id="auth-toggle-text">
                        New user? <a href="#" id="toggle-auth-mode">Signup</a>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
    <script src="{% static 'js/firebase_config.js' %}"></script>
    <script src="{% static 'js/auth.js' %}"></script>
    <script>
        firebase.auth().onAuthStateChanged(user => {
            const loginBtn = document.getElementById('login-btn');
            const bookmarkButtons = document.querySelectorAll('.bookmark-btn');
            const removeButtons = document.querySelectorAll('.remove-btn');

            if (user) {
                loginBtn.style.display = 'none';
                bookmarkButtons.forEach(btn => btn.style.display = 'inline-block');

                // Check bookmarked posts
                const db = firebase.firestore();
                const userBookmarksRef = db.collection('bookmarks').doc(user.uid).collection('articles');
                userBookmarksRef.get().then(querySnapshot => {
                    const bookmarkedPostIds = new Set();
                    querySnapshot.forEach(doc => {
                        const data = doc.data();
                        if (data.post_id) {
                            bookmarkedPostIds.add(data.post_id);
                        }
                    });

                    bookmarkButtons.forEach(btn => {
                        const postId = btn.dataset.postId;
                        if (bookmarkedPostIds.has(postId)) {
                            btn.style.display = 'none';
                            const removeBtn = btn.parentElement.querySelector('.remove-btn');
                            if (removeBtn) {
                                removeBtn.style.display = 'inline-block';
                                removeBtn.dataset.docId = Array.from(querySnapshot.docs)
                                    .find(doc => doc.data().post_id === postId).id;
                            }
                        }
                    });
                });

                // Bookmark functionality
                bookmarkButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const title = button.dataset.title;
                        const description = button.dataset.description;
                        const image = button.dataset.image;
                        const url = button.dataset.url;
                        const postId = button.dataset.postId;

                        userBookmarksRef
                            .where('post_id', '==', postId)
                            .get()
                            .then(querySnapshot => {
                                if (!querySnapshot.empty) {
                                    alert("This article is already bookmarked!");
                                    button.style.display = 'none';
                                    const removeBtn = button.parentElement.querySelector('.remove-btn');
                                    if (removeBtn) {
                                        removeBtn.style.display = 'inline-block';
                                        removeBtn.dataset.docId = querySnapshot.docs[0].id;
                                    }
                                } else {
                                    userBookmarksRef
                                        .add({
                                            title: title,
                                            description: description,
                                            image: image,
                                            url: url,
                                            post_id: postId,
                                            timestamp: firebase.firestore.FieldValue.serverTimestamp()
                                        })
                                        .then(() => {
                                            alert("Article bookmarked successfully!");
                                            button.style.display = 'none';
                                            const removeBtn = button.parentElement.querySelector('.remove-btn');
                                            if (removeBtn) {
                                                removeBtn.style.display = 'inline-block';
                                            }
                                        })
                                        .catch(error => {
                                            alert("Failed to bookmark article: " + error.message);
                                        });
                                }
                            });
                    });
                });

                // Remove functionality
                removeButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const docId = button.dataset.docId;
                        userBookmarksRef
                            .doc(docId)
                            .delete()
                            .then(() => {
                                alert("Article removed from bookmarks!");
                                button.style.display = 'none';
                                const bookmarkBtn = button.parentElement.querySelector('.bookmark-btn');
                                if (bookmarkBtn) {
                                    bookmarkBtn.style.display = 'inline-block';
                                }
                            })
                            .catch(error => {
                                alert("Failed to remove article: " + error.message);
                            });
                    });
                });
            } else {
                loginBtn.style.display = 'inline-block';
                bookmarkButtons.forEach(btn => btn.style.display = 'none');
                removeButtons.forEach(btn => btn.style.display = 'none');
            }
        });

        // Auth handling
        let isSignup = false;
        document.getElementById('toggle-auth-mode').addEventListener('click', function (e) {
            e.preventDefault();
            isSignup = !isSignup;
            document.getElementById('authModalLabel').innerText = isSignup ? "Signup" : "Login";
            document.getElementById('auth-submit-btn').innerText = isSignup ? "Signup" : "Login";
            this.innerHTML = isSignup ? ' <a href="#">Login</a>' : ' <a href="#">Signup</a>';
        });

        document.getElementById('auth-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const email = document.getElementById('auth-email').value.trim();
            const password = document.getElementById('auth-password').value.trim();
            const errorMsg = document.getElementById('auth-error-msg');
            errorMsg.textContent = '';

            const auth = firebase.auth();
            const modal = bootstrap.Modal.getInstance(document.getElementById('authModal'));

            if (isSignup) {
                auth.createUserWithEmailAndPassword(email, password)
                    .then(() => {
                        modal.hide();
                        location.reload();
                    })
                    .catch(error => {
                        errorMsg.textContent = "❌ " + error.message;
                    });
            } else {
                auth.signInWithEmailAndPassword(email, password)
                    .then(() => {
                        modal.hide();
                        location.reload();
                    })
                    .catch(error => {
                        errorMsg.textContent = "❌ " + error.message;
                    });
            }
        });
    </script>
</body>
</html>